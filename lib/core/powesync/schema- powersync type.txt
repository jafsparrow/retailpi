-- Company Table
CREATE TABLE res_company (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    updated_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    is_deleted BOOLEAN DEFAULT FALSE
);

-- Users Table
CREATE TABLE res_users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    company_id UUID REFERENCES res_company(id) ON DELETE SET NULL,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    updated_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    is_deleted BOOLEAN DEFAULT FALSE
);

-- Product Category Table
CREATE TABLE product_category (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) UNIQUE NOT NULL,
    parent_id UUID REFERENCES product_category(id) ON DELETE SET NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    updated_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    is_deleted BOOLEAN DEFAULT FALSE
);

-- Product Template (Base for Variants)
CREATE TABLE product_template (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    company_id UUID REFERENCES res_company(id) ON DELETE SET NULL,
    price DECIMAL(12, 2) NOT NULL CHECK (price >= 0),
    active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    updated_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    is_deleted BOOLEAN DEFAULT FALSE
);

-- Many-to-Many Relation Between Products & Categories
CREATE TABLE product_category_rel (
    product_template_id UUID REFERENCES product_template(id) ON DELETE CASCADE,
    category_id UUID REFERENCES product_category(id) ON DELETE CASCADE,
    PRIMARY KEY (product_template_id, category_id)
);

-- Product Table (Variants of a Template)
CREATE TABLE product_product (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    product_tmpl_id UUID REFERENCES product_template(id) ON DELETE CASCADE,
    sku VARCHAR(64) UNIQUE NOT NULL,
    barcode VARCHAR(64) UNIQUE,
    active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    updated_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    is_deleted BOOLEAN DEFAULT FALSE
);

-- Product Attribute Table (Color, Size, Material, etc.)
CREATE TABLE product_attribute (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    updated_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    is_deleted BOOLEAN DEFAULT FALSE
);

-- Product Attribute Values (Red, Blue, Large, Small, etc.)
CREATE TABLE product_attribute_value (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    attribute_id UUID REFERENCES product_attribute(id) ON DELETE CASCADE,
    value VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    updated_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    is_deleted BOOLEAN DEFAULT FALSE
);

-- Product Variants (Product + Attribute Values)
CREATE TABLE product_variant (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    product_id UUID REFERENCES product_product(id) ON DELETE CASCADE,
    attribute_value_id UUID REFERENCES product_attribute_value(id) ON DELETE CASCADE,
    UNIQUE (product_id, attribute_value_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    updated_by UUID REFERENCES res_users(id) ON DELETE SET NULL,
    is_deleted BOOLEAN DEFAULT FALSE
);

-- TRIGGER FUNCTION: Update `updated_at` and `updated_by` on row changes
CREATE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    IF current_setting('myapp.current_user', true) IS NOT NULL THEN
        NEW.updated_by = current_setting('myapp.current_user')::UUID;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply trigger to all relevant tables
DO $$ 
DECLARE tbl TEXT;
BEGIN
    FOR tbl IN 
        SELECT table_name FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name IN ('res_company', 'res_users', 'product_category', 'product_template', 
                           'product_product', 'product_attribute', 'product_attribute_value', 'product_variant')
    LOOP
        EXECUTE format('
            CREATE TRIGGER %I_update_timestamp
            BEFORE UPDATE ON %I
            FOR EACH ROW EXECUTE FUNCTION update_timestamp();',
            tbl, tbl);
    END LOOP;
END $$;

-- INDEXING FOR FAST LOOKUPS
CREATE INDEX idx_product_sku ON product_product (sku);
CREATE INDEX idx_product_barcode ON product_product (barcode);
CREATE INDEX idx_user_email ON res_users (email);
CREATE INDEX idx_is_deleted ON product_product (is_deleted);
