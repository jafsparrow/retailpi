-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Currency table (unchanged)
CREATE TABLE res_currency (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(3) NOT NULL,
    symbol VARCHAR(5) NOT NULL,
    rounding INTEGER NOT NULL DEFAULT 1,
    decimal_places INTEGER NOT NULL DEFAULT 2,
    active BOOLEAN DEFAULT TRUE,
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    write_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_currency_name UNIQUE (name)
);

-- Company table (unchanged)
CREATE TABLE res_company (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    currency_id UUID NOT NULL REFERENCES res_currency(id),
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    write_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    active BOOLEAN DEFAULT TRUE
);

-- User table for RBAC
CREATE TABLE res_users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    company_id UUID NOT NULL REFERENCES res_company(id),
    login VARCHAR(255) NOT NULL,
    password VARCHAR(255), -- Store hashed passwords
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255),
    active BOOLEAN DEFAULT TRUE,
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    write_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_user_login UNIQUE (company_id, login)
);

-- Role table for RBAC
CREATE TABLE res_roles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    company_id UUID NOT NULL REFERENCES res_company(id),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    active BOOLEAN DEFAULT TRUE,
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    write_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_role_name UNIQUE (company_id, name)
);

-- User-Role mapping (many-to-many)
CREATE TABLE res_users_roles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES res_users(id) ON DELETE CASCADE,
    role_id UUID NOT NULL REFERENCES res_roles(id) ON DELETE CASCADE,
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    write_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_user_role UNIQUE (user_id, role_id)
);

-- Permission table for RBAC
CREATE TABLE res_permissions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    company_id UUID NOT NULL REFERENCES res_company(id),
    name VARCHAR(255) NOT NULL, -- e.g., "read_invoice", "write_product"
    model VARCHAR(255) NOT NULL, -- e.g., "account_invoice", "product_product"
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    write_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_permission_name UNIQUE (company_id, name, model)
);

-- Role-Permission mapping (many-to-many)
CREATE TABLE res_roles_permissions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    role_id UUID NOT NULL REFERENCES res_roles(id) ON DELETE CASCADE,
    permission_id UUID NOT NULL REFERENCES res_permissions(id) ON DELETE CASCADE,
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    write_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_role_permission UNIQUE (role_id, permission_id)
);

-- Partner table (unchanged)
CREATE TABLE res_partner (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    company_id UUID NOT NULL REFERENCES res_company(id),
    currency_id UUID REFERENCES res_currency(id),
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255),
    phone VARCHAR(255),
    is_company BOOLEAN DEFAULT FALSE,
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    write_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    active BOOLEAN DEFAULT TRUE,
    CONSTRAINT unique_partner_email UNIQUE (company_id, email)
);

-- Product Category table (unchanged)
CREATE TABLE product_category (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    company_id UUID NOT NULL REFERENCES res_company(id),
    name VARCHAR(255) NOT NULL,
    parent_id UUID REFERENCES product_category(id),
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    write_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    active BOOLEAN DEFAULT TRUE
);

-- Product table (unchanged)
CREATE TABLE product_product (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    company_id UUID NOT NULL REFERENCES res_company(id),
    category_id UUID NOT NULL REFERENCES product_category(id),
    name VARCHAR(255) NOT NULL,
    list_price BIGINT NOT NULL DEFAULT 0,
    standard_price BIGINT NOT NULL DEFAULT 0,
    type VARCHAR(50) CHECK (type IN ('product', 'service', 'consu')),
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    write_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    active BOOLEAN DEFAULT TRUE
);

-- Invoice table (unchanged)
CREATE TABLE account_invoice (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    company_id UUID NOT NULL REFERENCES res_company(id),
    partner_id UUID NOT NULL REFERENCES res_partner(id),
    currency_id UUID NOT NULL REFERENCES res_currency(id),
    invoice_date DATE NOT NULL DEFAULT CURRENT_DATE,
    due_date DATE NOT NULL,
    state VARCHAR(20) CHECK (state IN ('draft', 'open', 'paid', 'cancelled')),
    amount_total BIGINT NOT NULL DEFAULT 0,
    amount_residual BIGINT NOT NULL DEFAULT 0,
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    write_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Invoice Line table (unchanged)
CREATE TABLE account_invoice_line (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    invoice_id UUID NOT NULL REFERENCES account_invoice(id) ON DELETE CASCADE,
    product_id UUID REFERENCES product_product(id),
    name TEXT NOT NULL,
    quantity BIGINT NOT NULL DEFAULT 100,
    price_unit BIGINT NOT NULL DEFAULT 0,
    price_subtotal BIGINT NOT NULL DEFAULT 0,
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    write_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Payment table (unchanged)
CREATE TABLE account_payment (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    company_id UUID NOT NULL REFERENCES res_company(id),
    invoice_id UUID REFERENCES account_invoice(id),
    partner_id UUID NOT NULL REFERENCES res_partner(id),
    currency_id UUID NOT NULL REFERENCES res_currency(id),
    amount BIGINT NOT NULL DEFAULT 0,
    payment_date DATE NOT NULL DEFAULT CURRENT_DATE,
    state VARCHAR(20) CHECK (state IN ('draft', 'posted', 'cancelled')),
    create_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    write_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Function to update write_date (unchanged)
CREATE OR REPLACE FUNCTION update_write_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.write_date = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to update invoice amounts (unchanged)
CREATE OR REPLACE FUNCTION update_invoice_amounts()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE account_invoice
    SET amount_total = (
        SELECT COALESCE(SUM(price_subtotal), 0)
        FROM account_invoice_line
        WHERE invoice_id = NEW.invoice_id
    ),
    amount_residual = (
        SELECT COALESCE(amount_total - (
            SELECT COALESCE(SUM(amount), 0)
            FROM account_payment
            WHERE invoice_id = NEW.invoice_id
            AND state = 'posted'
        ), amount_total)
    )
    WHERE id = NEW.invoice_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers for write_date (updated to include new tables)
CREATE TRIGGER update_res_currency_write_date BEFORE UPDATE ON res_currency FOR EACH ROW EXECUTE FUNCTION update_write_date();
CREATE TRIGGER update_res_company_write_date BEFORE UPDATE ON res_company FOR EACH ROW EXECUTE FUNCTION update_write_date();
CREATE TRIGGER update_res_users_write_date BEFORE UPDATE ON res_users FOR EACH ROW EXECUTE FUNCTION update_write_date();
CREATE TRIGGER update_res_roles_write_date BEFORE UPDATE ON res_roles FOR EACH ROW EXECUTE FUNCTION update_write_date();
CREATE TRIGGER update_res_users_roles_write_date BEFORE UPDATE ON res_users_roles FOR EACH ROW EXECUTE FUNCTION update_write_date();
CREATE TRIGGER update_res_permissions_write_date BEFORE UPDATE ON res_permissions FOR EACH ROW EXECUTE FUNCTION update_write_date();
CREATE TRIGGER update_res_roles_permissions_write_date BEFORE UPDATE ON res_roles_permissions FOR EACH ROW EXECUTE FUNCTION update_write_date();
CREATE TRIGGER update_res_partner_write_date BEFORE UPDATE ON res_partner FOR EACH ROW EXECUTE FUNCTION update_write_date();
CREATE TRIGGER update_product_category_write_date BEFORE UPDATE ON product_category FOR EACH ROW EXECUTE FUNCTION update_write_date();
CREATE TRIGGER update_product_product_write_date BEFORE UPDATE ON product_product FOR EACH ROW EXECUTE FUNCTION update_write_date();
CREATE TRIGGER update_account_invoice_write_date BEFORE UPDATE ON account_invoice FOR EACH ROW EXECUTE FUNCTION update_write_date();
CREATE TRIGGER update_account_invoice_line_write_date BEFORE UPDATE ON account_invoice_line FOR EACH ROW EXECUTE FUNCTION update_write_date();
CREATE TRIGGER update_account_payment_write_date BEFORE UPDATE ON account_payment FOR EACH ROW EXECUTE FUNCTION update_write_date();

-- Triggers for invoice amounts (unchanged)
CREATE TRIGGER update_invoice_amounts_trigger AFTER INSERT OR UPDATE OR DELETE ON account_invoice_line FOR EACH ROW EXECUTE FUNCTION update_invoice_amounts();
CREATE TRIGGER update_payment_amounts_trigger AFTER INSERT OR UPDATE ON account_payment FOR EACH ROW EXECUTE FUNCTION update_invoice_amounts();

-- Indexes (updated to include new tables)
CREATE INDEX idx_res_users_company ON res_users(company_id);
CREATE INDEX idx_res_roles_company ON res_roles(company_id);
CREATE INDEX idx_res_users_roles_user ON res_users_roles(user_id);
CREATE INDEX idx_res_roles_permissions_role ON res_roles_permissions(role_id);
CREATE INDEX idx_res_partner_company ON res_partner(company_id);
CREATE INDEX idx_product_product_company ON product_product(company_id);
CREATE INDEX idx_account_invoice_company ON account_invoice(company_id);
CREATE INDEX idx_account_invoice_partner ON account_invoice(partner_id);
CREATE INDEX idx_account_invoice_line_invoice ON account_invoice_line(invoice_id);
CREATE INDEX idx_account_payment_invoice ON account_payment(invoice_id);